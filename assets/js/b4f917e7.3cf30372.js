"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[443],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),h=l(n),d=a,f=h["".concat(s,".").concat(d)]||h[d]||p[d]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3177:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return h}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],c={sidebar_position:3},s="On-chain integration",l={unversionedId:"civic-pass/on-chain-integration",id:"civic-pass/on-chain-integration",isDocsHomePage:!1,title:"On-chain integration",description:"The identity.com on-chain-identity-gateway repository contains a Rust crate called integration-lib . The dApp smart contracts will call this lib to verify gateway tokens before processing a transaction.",source:"@site/docs/civic-pass/on-chain-integration.md",sourceDirName:"civic-pass",slug:"/civic-pass/on-chain-integration",permalink:"/docusaurus/docs/civic-pass/on-chain-integration",editUrl:"https://github.com/s4nt14go/docusaurus/edit/main/docs/civic-pass/on-chain-integration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"How to apply",permalink:"/docusaurus/docs/civic-pass/how-to-apply"},next:{title:"UI integration: Civic's React component",permalink:"/docusaurus/docs/civic-pass/ui-integration"}},u=[{value:"Error handling",id:"error-handling",children:[]}],p={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"on-chain-integration"},"On-chain integration"),(0,i.kt)("p",null,"The identity.com on-chain-identity-gateway repository contains a Rust crate called integration-lib . The dApp smart contracts will call this lib to verify gateway tokens before processing a transaction."),(0,i.kt)("p",null,"Once the integration-lib is imported, it can be called as follows to check whether a given gateway token is valid."),(0,i.kt)("p",null,"The following parameters must be passed as inputs to the dApp transaction:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"userWallet : The user of the dApp (e.g. the trader in a defi application) . A Civic Pass must have been already issued to this wallet."),(0,i.kt)("li",{parentName:"ul"},"gateway_token The address of the Civic Pass returned from useGateway"),(0,i.kt)("li",{parentName:"ul"},"gatekeeper_network The gatekeeper network on which the Civic Pass has been issued. Please contact a Civic account manager for the specific Gatekeeper Network you should use. For more information about Gatekeeper Networks, see here .")),(0,i.kt)("p",null,"The Civic Pass (gateway token) can be accessed in the dApp through the useGateway hook on the Civic React Component , once the user has passed the Gatekeeper verification."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use solana_gateway::Gateway;\n\n// This check happens before the dApp transaction is processed\nfn process() {\n// The owner of the gateway token\nlet userWallet: AccountInfo;\n// The gateway token presented by the owner\nlet gateway_token: AccountInfo;\n// The gatekeeper network key\nlet gatekeeper_network: Pubkey;\n\n    let gateway_verification_result:Result<(), GatewayError> =\n        Gateway::verify_gateway_token_account_info(\n            &gateway_token_account_info, &userWallet.key, &gatekeeper\n        );\n}\n")),(0,i.kt)("h2",{id:"error-handling"},"Error handling"),(0,i.kt)("p",null,"The Gateway call will return a GatewayError if something goes wrong or the token is invalid. The possible values can be seen in error.rs . In this case, the dApp smart contract should reject the transaction."))}h.isMDXComponent=!0}}]);